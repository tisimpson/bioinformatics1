"0","# Now we can finally start to analyse the data. At this point, we'd normally use the function ""DESeq"", which wraps all the standard differential expression "
"0","# analysis steps into a single call. However, here we'll execute some of the steps separately, so as to examine in a little more detail."
"0","# The first thing we have to do is normalise counts across the samples. Because different total numbers of reads may be produced in different sequencing runs "
"0","# (i.e. the samples are sequenced to different ""depths"" of read coverage), genes which are *not* differentially expressed may nevertheless have very different "
"0","# counts across samples. DESeq2 assumes that most genes are not differentially expressed (which is *usually* - but not always! - a sensible assumption), and "
"0","# then calculates a per-sample ""size factor"" to be applied to the counts of each sample (it divides each count by the size factor). This brings the counts for "
"0","# each sample onto a common scale so that comparisons can be made between them."
"0","dds <- estimateSizeFactors(dds)"
"0",""
"0","# DESeq has calculated, for example, that the counts in the ""treated3"" sample are considerably larger than all the other samples, and that those in the "
"0","# ""untreated3"" sample are considerably smaller."
"0","sizeFactors(dds)"
"1","untreated3 "
"1","untreated4 "
"1","  treated2 "
"1","  treated3 "
"1","
"
"1"," 0.8730966 "
"1"," 1.0106112 "
"1"," 1.0224517 "
"1"," 1.1145888 "
"1","
"
"0","# We can see the difference the size factors make by examining the raw..."
"0","head(counts(dds))"
"1","           "
"1"," untreated3"
"1"," untreated4"
"1"," treated2"
"1"," treated3"
"1","
FBgn0000003"
"1","          0"
"1","          0"
"1","        0"
"1","        1"
"1","
FBgn0000008"
"1","         76"
"1","         70"
"1","       88"
"1","       70"
"1","
FBgn0000014"
"1","          0"
"1","          0"
"1","        0"
"1","        0"
"1","
FBgn0000015"
"1","          1"
"1","          2"
"1","        0"
"1","        0"
"1","
FBgn0000017"
"1","       3564"
"1","       3150"
"1","     3072"
"1","     3334"
"1","
FBgn0000018"
"1","        245"
"1","        310"
"1","      299"
"1","      308"
"1","
"
"0","# ...and normalised counts."
"0","head(counts(dds, normalized=TRUE))"
"1","           "
"1","  untreated3"
"1"," untreated4"
"1","   treated2"
"1","     treated3"
"1","
FBgn0000003"
"1","    0.000000"
"1","    0.00000"
"1","    0.00000"
"1","    0.8971919"
"1","
FBgn0000008"
"1","   87.046493"
"1","   69.26502"
"1","   86.06763"
"1","   62.8034302"
"1","
FBgn0000014"
"1","    0.000000"
"1","    0.00000"
"1","    0.00000"
"1","    0.0000000"
"1","
FBgn0000015"
"1","    1.145349"
"1","    1.97900"
"1","    0.00000"
"1","    0.0000000"
"1","
FBgn0000017"
"1"," 4082.022370"
"1"," 3116.92579"
"1"," 3004.54278"
"1"," 2991.2376629"
"1","
FBgn0000018"
"1","  280.610404"
"1","  306.74508"
"1","  292.43434"
"1","  276.3350930"
"1","
"
